#ifndef THREADPOOL_H
#define THREADPOOL_H

#include <list>
#include <cstdio>// cstdio就是将stdio.h的内容用C++的头文件形式表现出来c
#include <exception>
#include <pthread.h>
#include "../lock/locker.h"

template <typename T>
class threadpool{
public:
    threadpool(int actor_model, connection_pool *coonPool, int thread_number = 8, int max_request = 10000);
    ~threadpool();

    bool append(T *request, int state);//??????????????????????????????????????????????????????
    bool append_p(T *request);
private:
    static void *worker(void *arg);// ?????????????????????????????????????????????????????????
    void run();// ?????????????????????????????????????????????????????????????????????????????

private:
    int m_thread_number;
    int m_max_requests;// 请求队列中允许的最大请求数
    pthread_t *m_threads;// 线程池数组
    std::list<T *> m_workqueue;// 请求队列
    locker m_queuelocker;
    sem m_queuestat;// 是否有任务需要处理
    
    int m_actor_model;
};

template <typename T>
threadpool<T>::threadpool(int actor_model, connection_pool *connPool, int thread_number, int max_requests): m_actor_model(actor_model),m_thread_number(thread_number), m_max_requests(max_requests), m_threads(NULL),m_connPool(connPool){
    if (thread_number <= 0 || max_requests <= 0) throw std::exception();

    m_threads = new pthread_t[m_thread_number];// 创建一个线程数组
}


#endif